name: CI/CD Pipeline

on:
  push:
    branches:
      - New_CI_CD
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - New_CI_CD
  workflow_dispatch:

jobs:
  display-info:
    runs-on: ubuntu-latest
    steps:
      - name: Display Push Info
        run: |
          echo "Commit Message: ${{ github.event.head_commit.message }}"
          echo "Pusher Name: ${{ github.actor }}"

  Test-Scenario:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017
        options: --health-cmd "mongo --version" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v2

      # Cache Node modules
      - name: Cache Node modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Cache Python packages
      - name: Cache Python packages
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Store current time
      - name: Store current time
        run: echo "CURRENT_TIME=$(date +'%Y-%m-%d_%s')" >> $GITHUB_ENV

      # Setup Feature Branch Environment
      - name: Setup Feature Branch Environment
        run: |
          ref=$(echo ${{ github.ref }})
          branch=$(echo "${ref##*/}")
          echo "FEATURE_BRANCH=$branch" >> $GITHUB_ENV

      # Check MongoDB Atlas for Existing Realm App
      - name: Check MongoDB Atlas for Existing Realm App
        run: |
          output=$(mongo "mongodb+srv://${{ secrets.ATLAS_URI_FEATURE_BRANCHES }}/GitHubActionsMetadata" --username ${{ secrets.ATLAS_USERNAME_FEATURE_BRANCHES }} --password ${{ secrets.ATLAS_PASSWORD_FEATURE_BRANCHES }} --eval "db.metadata.findOne({'branch': '$branch'})")
          if [[ $output == *null ]]; then
            echo "No Realm App found for this branch. A new app will be pushed later in this workflow"
          else
            echo "A Realm App was found for this branch. Updates will be pushed to the existing app later in this workflow"
            app_id=$(echo $output | sed 's/^.*realm_app_id" : "\([^"]*\).*/\1/')
            echo "REALM_APP_ID=$app_id" >> $GITHUB_ENV
          fi

      # Update Environment and Realm Configuration
      - name: Update Environment and Realm Configuration
        run: |
          cd inventory/export/sync/environments
          printf '{\n     "values": {"databaseName": "InventoryDemo-%s"}\n}' "$branch" > development.json
          cd ..
          sed -i 's/{/{ "environment": "development",/' realm_config.json

      # Install and Authenticate Realm CLI
      - name: Install and Authenticate Realm CLI
        run: |
          npm install -g mongodb-realm-cli@beta
          realm-cli login --api-key="${{ secrets.REALM_API_PUBLIC_KEY }}" --private-api-key="${{ secrets.REALM_API_PRIVATE_KEY }}"

      # Start Server
      - name: Install Server Dependencies
        run: |
          cd server
          npm install

      - name: Start Server
        run: |
          cd server/src
          node index.js &
        continue-on-error: true

      # Wait for Server to Start
      - name: Wait for Server to Start
        run: sleep 10

      # Start Client
      - name: Install Client Dependencies
        run: |
          cd client
          npm install

      - name: Start Client
        run: |
          cd client
          npm start &
        continue-on-error: true

      # Wait for Client to Start
      - name: Wait for Client to Start
        run: sleep 10

      # Setup Firefox
      - name: Setup Firefox
        uses: browser-actions/setup-firefox@latest

      # Run Selenium Tests
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install Selenium dependencies
        run: |
          pip install selenium==4.0.0
          pip install webdriver-manager
          pip install pytest

      - name: Test script
        run: |
          python3 Test/UAT1_UAT3_test.py

      # Cleanup
      - name: Cleanup Resources
        if: always()
        run: |
          echo "Cleanup any resources if needed"

